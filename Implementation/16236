#아기상어 16236
from collections import deque
INF = 1e9 # 무한

n = int(input()) #맵의 크기

array = []

for i in range(n):
	array.append(list(map(int, input().split())))

now_size = 2 #현재 크기
now_x, now_y = 0, 0 #현재 위치

#아기상어의 처음 위치 찾기
for i in range(n):
	for j in range(n):
		if array[i][j] == 9:
			now_x, now_y = i, j
			array[now_x][now_y] = 0

dx = [-1, 0 , 1, 0]
dy = [0 , 1, 0, -1]

#최단거리 계산 bfs함수

def bfs():
	dist = [[-1] * n for _ in range(n)] #-1로 초기화
	#시작위치 0 셋팅
	q = deque([(now_x, now_y)])
	dist[now_x][now_y] = 0
	while q:
		x, y = q.popleft()
		for i in range(4):
			nx = x + dx[i]
			ny = y + dy[i]
			if 0 <= nx and nx < n and 0 <= ny and ny < n:
				#자신 크기보다 작거나 같은경우
				if dist[nx][ny] == -1 and array[nx][ny] <= now_size:
					dist[nx][ny] = dist[x][y] + 1
					q.append((nx, ny))
	return dist				


#먹을 물고기 찾기
def find(dist):
	x, y = 0, 0 #먹을 물고기 위치 좌표
	min_dist = INF # 최단거리
	for i in range(n):
		for j in range(n):
			#도달이 가능하며 먹을수 있는 물고기일시
			if dist[i][j] != -1 and 1 <= array[i][j] and array[i][j] < now_size:
				#가장 가까운 물고기 선택
				if dist[i][j] < min_dist:
					x, y = i, j
					min_dist = dist[i][j]
	if min_dist == INF:
		return None
	else:
		return x, y, min_dist
		
result = 0 #최종 시간
ate = 0 #현재크기에서 먹은수

while True:
	#먹을수 있는 위치 찾기
	value = find(bfs())
	# 먹을수 있는 물고기가 없을시
	if value == None:
		print(result)
		break
	else:
		#현재 위치 갱신 및 이동 거리 변경
		now_x, now_y = value[0], value[1]
		result += value[2]
		#먹은위치 0 처리
		array[now_x][now_y] = 0
		ate += 1
		#현재 사이즈 크기 증가
		if now_size <= ate:
			now_size += 1
			ate = 0

	




	
	
