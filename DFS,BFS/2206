# 벽 부수고 이동하기
# 해결방안
# 1.1회 벽을 부술수 있는지 체크용으로 3차원 배열을 선언해야함
# 2.bfs로 벽을 부술수 있는경우와 없는경우 2가지로 나누어서 return함
# 시행착오
# 1. 벽을 부술수 있는 경우를 고려하는라 어려움..
# 2. bfs 함수 구현이 까다로움

from collections import deque

n, m = map(int, input().split())
arr = [list(map(int, input())) for _ in range(n)]

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def bfs():
    visited = [[[0] * 2 for _ in range(m)]  for _ in range(n)]
    visited[0][0][1] = 1
    queue = deque([])
    queue.append([0, 0, 1])

    while queue:
        x, y, z = queue.popleft()
        if x == n -1 and y == m-1:
            return visited[x][y][z]
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            if 0 <= nx < n and 0 <= ny < m:
                if arr[nx][ny] == 1 and z == 1:
                    visited[nx][ny][0] = visited[x][y][1] + 1
                    queue.append([nx, ny, 0])
                elif arr[nx][ny] == 0 and visited[nx][ny][z] == 0:
                    visited[nx][ny][z] = visited[x][y][z] + 1
                    queue.append([nx, ny, z])
    return -1
print(bfs())
