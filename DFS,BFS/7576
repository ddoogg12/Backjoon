# 토마토 (실버 1)
# 해결 방안
# 1. bfs로 구현하면 해결 가능
# 2. 초기에 익은 토마토가 여러개 있을수 있으므로 데크로 구현함 

from collections import deque

m, n = map(int, input().split())
arr = [ list(map(int, input().split())) for _ in range(n)]
queue = deque([])
answer = 0

#상하좌우
dx = [1, -1, 0, 0]
dy = [0, 0, 1, -1]

for i in range(n):
    for j in range(m):
        if arr[i][j] == 1:
            queue.append([i, j])

def bfs():
    while queue:
        x, y = queue.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]

            if 0 <= nx and nx < n and 0 <= ny and ny < m and arr[nx][ny] == 0:
                arr[nx][ny] = arr[x][y] + 1
                queue.append([nx, ny])

bfs()

for i in arr:
    for j in i:
        if j == 0:
            print(-1)
            exit(0)
    answer = max(answer, max(i))

print(answer -1)
